#!/usr/bin/env bash

# We utiilize BashMatic framework for various features.

set +e

export BashMatic="${HOME}/.bashmatic"

[[ -s ${BashMatic}/init.sh ]] || {
  rm -rf "${BashMatic}" 2>/dev/null
  git clone https://github.com/kigster/bashmatic "${BashMatic}" 2>&1 1>/dev/null
}

source ~/.bashmatic/init.sh

# https://blog.phusion.nl/2017/10/13/why-ruby-app-servers-break-on-macos-high-sierra-and-what-can-be-done-about-it/
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
export RAILS_ENV="${RAILS_ENV:-"development"}"
export PUMA_DEFUALT_THREAD_COUNT=10

# Use a more concervative thread count in development
[[ ${RAILS_ENV} == "development" ]] && export PUMA_DEFUALT_THREAD_COUNT=1

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

puma.master-pid() {
  ps -ef | grep -e '[p]uma [0-9]' | awk '{print $2}'
}

puma.num-live-procs() {
  local extra_filter="${1}"; shift
  local extra_flag="${1}"; shift

  printf "%d" "$(ps -ef | grep -e '[p]uma[: ]' | grep -e ${extra_flag} "${extra_filter}" | grep -v puma-ctl | wc -l | sed 's/\ //g')"
}

puma.is-not-running() {
  local pumas=$(puma.num-live-procs)
  if [[ ${pumas} -eq 0 ]]; then
    return 0
  else
    return 1
  fi
}

puma.is-running() {
  local pumas=$(puma.num-live-procs)
  [[ ${pumas} -gt 0 ]]
}

puma.nuke-em() {
  run "ps -ef | grep [p]uma | xargs kill -9"
}

puma.nuke-em-sudo() {
  run "ps -ef | grep [p]uma | xargs sudo kill -9"
}

puma.wipe-before-start() {
  puma.is-not-running && return

  puma.is-running && {
    info "Detected an existing Puma Cluster â€” ${pumas} processes must die...  "
    puma.nuke-em
    sleep 3

    puma.is-running && {
      printf "Dang, still detecting %d dangling workers...", $(ps -ef | grep [p]uma | wd -l)
      return 1
    }
  }
}

puma.status.summary() {
  local master=$(puma.num-live-procs 'worker' '-v')
  local workers=$(puma.num-live-procs worker)
  h2 "A total of ${master} master processes with ${workers} workers."
}

puma.status.listing() {
  declare -a pumas=("$(ps -ef | grep -e [p]uma | grep -e -v 'puma-ctl|grep' | grep --color=always puma)")
  [[ ${#pumas[@]} -gt 1 ]] && {
    h2 "Currently Active Puma Processes:"
    echo "${pumas[*]}"
  }
}

puma.status.tree() {
  local mpid=$(puma.master-pid)
  if [[ -n ${mpid} ]]; then
    pstree -g 3 -p ${mpid}
  fi
}

puma.status() {
  puma.status.summary
  puma.status.listing
  puma.status.tree
}

puma.start() {
  puma.wipe-before-start
  h2 "Booting Puma ${bldulw}$(bundle exec puma --version)"
  run::set-next show-output-on
  run "bundle exec puma -e ${RAILS_ENV} $@"
  sleep 1 && info "Puma should now be running:"
  puma.status.tree
}

puma.stop() {
puma.status.tree
  puma.wipe-before-start
  info "Pima is now down."
}

main() {
  local command="$1"; shift

  echo "${command}" | grep -e -q 'start|stop|status' && {
    local func="puma.${command}"
    ${func} "$@"
    return 0
  }

  printf "
${bldylw}USAGE:
    ${bldgrn}bin/puma-ctl [ start | stop ]${clear}

${bldylw}BECAUSE:
    ${bldred}...HELL NO, YOU BEAAAAAAACHH!!!! ðŸ’€ ${clr}
"
}

main "$@"

