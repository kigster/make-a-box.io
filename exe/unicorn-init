#!/usr/bin/env bash
set -e

[[ -z "$RAILS_ENV" ]] && {
  echo 'RAILS_ENV must be set!'
  exit 1
}

app_root=$(pwd)

[[ -f 'exe/unicorn-init' ]] || {
  echo "Invalid root: $app_root"
  exit 2
}

eval "$(rbenv init -)"

bundler=$(which bundle)
timeout=${timeout-60}

pid="${app_root}/tmp/pids/unicorn.pid"
command="$bundler exec unicorn -D -c $app_root/config/unicorn.rb"
action="$1"
set -u

old_pid="$pid.oldbin"

cd $app_root || exit 1

sig () {
    test -s "$pid" && kill -$1 `cat $pid`
}

oldsig () {
    test -s $old_pid && kill -$1 `cat $old_pid`
}

case $action in
start)
    sig 0 && echo >&2 "Already running" && exit 0
    $command
    ;;
stop)
    sig QUIT && exit 0
    echo >&2 "Not running"
    ;;
force-stop)
    sig TERM && exit 0
    echo >&2 "Not running"
    ;;
restart|reload)
    sig HUP && echo reloaded OK && exit 0
    echo >&2 "Couldn't reload, starting '$command' instead"
    $command
    ;;
upgrade)
    if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
    then
        n=$timeout
        while test -s $old_pid && test $n -ge 0
        do
            printf '.' && sleep 1 && n=$(( $n - 1 ))
        done
        echo

        if test $n -lt 0 && test -s $old_pid
        then
            echo >&2 "$old_pid still exists after $timeout seconds"
            exit 1
        fi
        exit 0
    fi
    echo >&2 "Couldn't upgrade, starting '$command' instead"
    $command
    ;;
reopen-logs)
    sig USR1
    ;;
*)
    echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
    exit 1
    ;;
esac
