set :default_env, { PATH:            "#{fetch(:ruby_bin_dir)}:/opt/local/bin:$PATH",
                    MAKE_OPTS:       '-j48',
                    LD_LIBRARY_PATH: '/opt/local/lib',
                    LDFLAGS:         '-L/opt/local/lib -R/opt/local/lib',
                    CFLAGS:          '-I/opt/local/include'
}

set :packages, %w(
   git
   gcc49
   gmake
   libiconv
   libxml2
   libxslt
   openssl
   watch
   zlib
   tar
   nodejs
 )

set :bundle_exec, 'source ~/.bashrc; bundle exec'
SSHKit.config.command_map[:tar]    = 'gtar'
SSHKit.config.command_map[:bundle] = 'source ~/.bashrc; bundle'

namespace :bundler do
  task :map_bins do
    fetch(:bundle_bins).each do |command|
      SSHKit.config.command_map.prefix[command.to_sym].delete('bundle exec')
      SSHKit.config.command_map.prefix[command.to_sym].push(fetch(:bundle_exec))
    end
  end
end

namespace :sunos do
  SSHKit.config.command_map[:rake] = 'source ~/.bashrc; bundle exec rake '
  desc ' Install SmartOS package dependencies '
  task :packages do
    on roles(:app) do |role_host|
      host = SSHKit::Host.new("root@#{role_host}")
      on host do
        execute "pkgin -y in #{fetch(:packages).join(' ')}; true"
      end
    end
  end

  namespace :native_extensions do
    task :install do
      on roles(:app) do
        within release_path do
          fetch(:native_gems).each do |gem|
            version = `grep #{gem} Gemfile.lock | grep -v '>' | sed ' s/[()]//g' | awk '{print $2}'`
            execute :bash, <<-EOF.gsub(/\s{2,}/, ' ')
            -c 'source ~/.bashrc; gem install #{gem} --version #{version}
              --install-dir #{shared_path}/bundle
              --no-ri --no-rdoc
              --
              --use-system-libraries
              --with-xml2-lib=/opt/local/lib
              --with-xml2-include=/opt/local/include/libxml2
              --with-xslt-lib=/opt/local/lib
              --with-xslt-include=/opt/local/include/libxslt
              --with-iconv-lib=/opt/local/lib
              --with-iconv-include=/opt/local/include
              --with-zlib-dir=/opt/local/lib'
            EOF
          end
        end

      end
    end
  end

  task init: %w(packages)
end


